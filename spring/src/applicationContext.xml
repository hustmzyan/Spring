<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        配置bean
        class: bean 的全类名，通过反射的方式在 IOC 容器中创建 Bean, 所以要求 Bean 中必须有无参数的构造器
        id: 标识容器中的 bean，id 唯一
     -->
    <bean id="helloWorld" class="com.hust.spring.beans.init.HelloWorld">
        <property name="name2" value="spring"></property>
    </bean>

    <!-- 通过构造方法来配置bean的属性 -->
    <bean id="car" class="com.hust.spring.beans.init.Car">
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg value="shanghai" index="1"></constructor-arg>
        <constructor-arg value="300000" type="java.lang.Double"></constructor-arg>
    </bean>

    <bean id="car2" class="com.hust.spring.beans.init.Car">
        <constructor-arg value="baoma" type="java.lang.String"></constructor-arg>
        <!-- 如果里面值包含特殊字符可以使用<![CDATA[]]>包裹起来 -->
        <!-- 属性值可以通过value子节点进行配置  -->
        <constructor-arg type="java.lang.String">
            <value><![CDATA[<shanghai^>]]></value>
        </constructor-arg>
        <constructor-arg type="java.lang.Integer">
            <value>250</value>
        </constructor-arg>
    </bean>

    <bean id="person" class="com.hust.spring.beans.init.Person">
        <property name="name" value="mzyan"></property>
        <property name="age" value="24"></property>
        <!-- 可以使用property的ref属性建立bean之间的引用关系 -->
        <property name="car" ref="car2"></property>
    </bean>

    <bean id="person2" class="com.hust.spring.beans.init.Person">
        <property name="name" value="mzyan"></property>
        <property name="age" value="24"></property>
        <!-- 内部bean，不能被外部引用，只能在内部使用 -->
        <property name="car">
            <bean id="car3" class="com.hust.spring.beans.init.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="Changan"></constructor-arg>
                <constructor-arg value="200000" type="java.lang.Double"></constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="person3" class="com.hust.spring.beans.init.Person">
        <constructor-arg value="xy"></constructor-arg>
        <constructor-arg value="25"></constructor-arg>
        <constructor-arg ref="car"></constructor-arg>
        <!--测试赋值null-->
        <!--<constructor-arg><null/></constructor-arg>-->

        <!-- 为级联属性赋值，注意需要先初始化后才可以为级联属性赋值，否则会有异常，和structs2不同-->
        <property name="car.maxspeed" value="250"></property>
    </bean>

    <bean id="person4" class="com.hust.spring.beans.collections.Person">
        <property name="name" value="Mike"></property>
        <property name="age" value="27"></property>
        <property name="cars">
            <!--使用list节点为List属性赋值 -->
            <list>
                <ref bean="car"/>
                <ref bean="car2"/>
                <!--<ref bean="car3"/>-->
            </list>
        </property>
    </bean>

    <!--配置Map属性值-->
    <bean id="newPerson" class="com.hust.spring.beans.collections.NewPerson">
        <property name="name" value="Rose"></property>
        <property name="age" value="28"></property>
        <property name="cars">
            <!--使用map节点以及entry子节点配置Map-->
            <map>
                <entry key="AA" value-ref="car"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>

    <!--配置Properties属性值-->
    <bean id="dataSource" class="com.hust.spring.beans.collections.DataSource">
        <property name="properties">
            <!--使用props和prop子节点为Properties属性赋值-->
            <props>
                <prop key="user">root</prop>
                <prop key="password">123456</prop>
                <prop key="jdbcUrl">jdbc:mysql:///test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

    <!--配置单例的集合bean，以供多个bean进行引用，需要导入util命名空间-->
    <util:list id="cars">
        <ref bean="car"></ref>
        <ref bean="car2"></ref>
    </util:list>
    <bean id="person5" class="com.hust.spring.beans.collections.Person">
        <property name="name" value="Jack"></property>
        <property name="age" value="25"></property>
        <property name="cars" ref="cars"></property>
    </bean>

    <!--通过p命名空间为bean的属性赋值，需要先导入p的命名空间，相对于传统的配置方式更加的简洁-->
    <bean id="person6" class="com.hust.spring.beans.collections.Person" p:name="Queen" p:age="30" p:cars-ref="cars"></bean>

</beans>